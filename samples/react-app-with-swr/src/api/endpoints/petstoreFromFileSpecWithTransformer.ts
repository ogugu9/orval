/**
 * Generated by orval v6.11.0 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import useSWR from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import useSWRMutation from 'swr/mutation';
import type { SWRMutationConfiguration } from 'swr/mutation';
import type {
  Pets,
  Error,
  ListPetsParams,
  Pet,
  CreatePetsBody,
  UpdatePetBody,
} from '../model';
import { customInstance } from '../mutator/custom-instance';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary List all pets
 */
export const listPets = (params?: ListPetsParams, version = 1) => {
  return customInstance<Pets>({
    url: `/v${version}/pets`,
    method: 'get',
    params,
  });
};

export const getListPetsKey = (params?: ListPetsParams, version = 1) => [
  `/v${version}/pets`,
  ...(params ? [params] : []),
];

export type ListPetsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listPets>>
>;
export type ListPetsQueryError = Error;

export const useListPets = <TError = Error>(
  params?: ListPetsParams,
  version = 1,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof listPets>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!version;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getListPetsKey(params, version) : null));

  const swrFn = () => listPets(params, version);

  const result = useSWR<Awaited<ReturnType<typeof swrFn>>, TError, Key>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...result,
  };
};

/**
 * @summary Create a pet
 */
export const createPets = (createPetsBody: CreatePetsBody, version = 1) => {
  return customInstance<Pet>({
    url: `/v${version}/pets`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: createPetsBody,
  });
};

export const getCreatePetsKey = (version = 1) => [`/v${version}/pets`];

export type CreatePetsMutationResult = NonNullable<
  Awaited<ReturnType<typeof createPets>>
>;
export type CreatePetsMutationError = Error;

export const useCreatePets = <TError = Error>(
  version = 1,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof createPets>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!version;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getCreatePetsKey(version) : null));

  const swrFn = (key: Key, options: { arg: CreatePetsBody }) =>
    createPets(options.arg, version);

  const result = useSWRMutation<
    Awaited<ReturnType<typeof swrFn>>,
    TError,
    Key,
    CreatePetsBody
  >(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...result,
  };
};

/**
 * @summary Info for a specific pet
 */
export const showPetById = (petId: string, version = 1) => {
  return customInstance<Pet>({
    url: `/v${version}/pets/${petId}`,
    method: 'get',
  });
};

export const getShowPetByIdKey = (petId: string, version = 1) => [
  `/v${version}/pets/${petId}`,
];

export type ShowPetByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof showPetById>>
>;
export type ShowPetByIdQueryError = Error;

export const useShowPetById = <TError = Error>(
  petId: string,
  version = 1,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof showPetById>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!(version && petId);
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getShowPetByIdKey(petId, version) : null));

  const swrFn = () => showPetById(petId, version);

  const result = useSWR<Awaited<ReturnType<typeof swrFn>>, TError, Key>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...result,
  };
};

/**
 * @summary Update a pet
 */
export const updatePet = (
  petId: string,
  updatePetBody: UpdatePetBody,
  version = 1,
) => {
  return customInstance<Pet>({
    url: `/v${version}/pets/${petId}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: updatePetBody,
  });
};

export const getUpdatePetKey = (petId: string, version = 1) => [
  `/v${version}/pets/${petId}`,
];

export type UpdatePetMutationResult = NonNullable<
  Awaited<ReturnType<typeof updatePet>>
>;
export type UpdatePetMutationError = Error;

export const useUpdatePet = <TError = Error>(
  petId: string,
  version = 1,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof updatePet>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!(version && petId);
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getUpdatePetKey(petId, version) : null));

  const swrFn = (key: Key, options: { arg: UpdatePetBody }) =>
    updatePet(petId, options.arg, version);

  const result = useSWRMutation<
    Awaited<ReturnType<typeof swrFn>>,
    TError,
    Key,
    UpdatePetBody
  >(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...result,
  };
};
